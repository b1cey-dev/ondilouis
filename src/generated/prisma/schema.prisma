// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String      @id @default(cuid())
  name           String?
  email          String      @unique
  username       String      @unique
  password       String
  bio            String?
  image          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  roles          Role[]      @relation("UserRoles")
  orders         Order[]
  products       Product[]   @relation("UserProducts")
  reviews        Review[]
  chats          Chat[]      @relation("UserChats")
  portfolioItems Portfolio[]
  isTeamMember   Boolean     @default(false)
  isAdmin        Boolean     @default(false)
  isSuperAdmin   Boolean     @default(false)
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  color       String?
  permissions Json
  discount    Float?   @default(0)
  users       User[]   @relation("UserRoles")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Float
  fileUrl     String
  images      String[]
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orders      Order[]
  creator     User     @relation("UserProducts", fields: [creatorId], references: [id])
  creatorId   String
}

model Order {
  id          String   @id @default(cuid())
  status      String   @default("pending")
  totalAmount Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  chat        Chat?
}

model Portfolio {
  id          String   @id @default(cuid())
  title       String
  description String
  mediaUrls   String[]
  category    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model Chat {
  id        String    @id @default(cuid())
  messages  Message[]
  order     Order     @relation(fields: [orderId], references: [id])
  orderId   String    @unique
  users     User[]    @relation("UserChats")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(cuid())
  content   String
  fileUrl   String?
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}

model AffiliateCode {
  id         String    @id @default(cuid())
  code       String    @unique
  discount   Float
  usageCount Int       @default(0)
  maxUses    Int?
  expiresAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Announcement {
  id        String   @id @default(cuid())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
