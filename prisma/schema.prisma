// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String      @id @default(cuid())
  name             String?
  email            String?     @unique
  username         String      @unique
  emailVerified    DateTime?   @db.Timestamp
  image            String?
  bio              String?     @db.Text
  password         String
  emailNotifications Boolean   @default(true)
  resetToken       String?
  resetTokenExpiry DateTime?   @db.Timestamp
  createdAt        DateTime    @default(now()) @db.Timestamp
  updatedAt        DateTime    @updatedAt @db.Timestamp
  roles            Role[]      @relation("UserRoles")
  accounts         Account[]
  sessions         Session[]
  products         Product[]   @relation("UserProducts")
  orders           Order[]
  portfolio        Portfolio?
  ratings          Rating[]    @relation("UserRatings")
  givenRatings     Rating[]    @relation("RaterRatings")
  chats            Chat[]      @relation("UserChats")
  messages         Message[]   @relation("UserMessages")
  discountCodes    DiscountCode[] @relation("UserDiscountCodes")
  cartItems        CartItem[]
  storeSettings    StoreSettings?
  announcements    Announcement[] @relation("UserAnnouncements")
  affiliate        Affiliate?  @relation("UserAffiliates")
  affiliateCode    String?
  createdTeams     Team[]      @relation("TeamCreator")
  teams            Team[]      @relation("TeamMembers")
  stripeConnectId  String?
  stripeConnectVerified Boolean @default(false)
  payouts          Payout[]
  balance          Float       @default(0)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime   @db.Timestamp
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  color       String?
  permissions Json
  discount    Float?
  isTeam      Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Timestamp
  updatedAt   DateTime @updatedAt @db.Timestamp
  users       User[]   @relation("UserRoles")
}

model Product {
  id          String      @id @default(cuid())
  title       String
  description String
  price       Float
  imageUrl    String
  fileUrl     String
  category    String
  status      String      @default("draft")
  creatorId   String
  createdAt   DateTime     @default(now()) @db.Timestamp
  updatedAt   DateTime     @updatedAt @db.Timestamp
  cartItems   CartItem[]
  orders      OrderItem[]
  creator     User        @relation("UserProducts", fields: [creatorId], references: [id])

  @@index([creatorId])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id                 String              @id @default(cuid())
  userId             String
  status             String              @default("pending")
  totalPrice         Float
  createdAt          DateTime            @default(now()) @db.Timestamp
  updatedAt          DateTime            @updatedAt @db.Timestamp
  affiliateReferrals AffiliateReferral[] @relation("OrderAffiliateReferrals")
  chat               Chat?
  user               User                @relation(fields: [userId], references: [id])
  orderItems         OrderItem[]
  rating             Rating?
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model Portfolio {
  id          String          @id @default(cuid())
  userId      String          @unique
  title       String
  description String
  createdAt   DateTime        @default(now()) @db.Timestamp
  updatedAt   DateTime        @updatedAt @db.Timestamp
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       PortfolioItem[]
}

model PortfolioItem {
  id          String    @id @default(cuid())
  portfolioId String
  title       String
  description String
  mediaUrl    String
  mediaType   String
  createdAt   DateTime  @default(now()) @db.Timestamp
  updatedAt   DateTime  @updatedAt @db.Timestamp
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
}

model Rating {
  id        String   @id @default(cuid())
  orderId   String   @unique
  userId    String
  raterId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp
  order     Order    @relation(fields: [orderId], references: [id])
  rater     User     @relation("RaterRatings", fields: [raterId], references: [id])
  user      User     @relation("UserRatings", fields: [userId], references: [id])
}

model Chat {
  id        String    @id @default(cuid())
  orderId   String    @unique
  userId    String
  createdAt DateTime  @default(now()) @db.Timestamp
  updatedAt DateTime  @updatedAt @db.Timestamp
  order     Order     @relation(fields: [orderId], references: [id])
  user      User      @relation("UserChats", fields: [userId], references: [id])
  messages  Message[]
}

model Message {
  id            String   @id @default(cuid())
  chatId        String
  userId        String
  content       String
  attachmentUrl String?
  createdAt     DateTime @default(now()) @db.Timestamp
  updatedAt     DateTime @updatedAt @db.Timestamp
  chat          Chat     @relation(fields: [chatId], references: [id])
  user          User     @relation("UserMessages", fields: [userId], references: [id])
}

model DiscountCode {
  id          String    @id @default(cuid())
  code        String    @unique
  discount    Float
  maxUses     Int?
  usedCount   Int       @default(0)
  expiresAt   DateTime?   @db.Timestamp
  createdById String
  createdAt   DateTime  @default(now()) @db.Timestamp
  updatedAt   DateTime  @updatedAt @db.Timestamp
  createdBy   User      @relation("UserDiscountCodes", fields: [createdById], references: [id])
}

model StoreSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  storeName         String
  storeDescription  String
  paymentEmail      String
  automaticDelivery Boolean  @default(true)
  notifyOnSale      Boolean  @default(true)
  discordServer     String?
  socialLinks       Json
  createdAt         DateTime @default(now()) @db.Timestamp
  updatedAt         DateTime @updatedAt @db.Timestamp
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Announcement {
  id          String   @id @default(cuid())
  title       String
  content     String
  type        String
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.Timestamp
  updatedAt   DateTime @updatedAt @db.Timestamp
  creatorId   String
  createdBy   User     @relation("UserAnnouncements", fields: [creatorId], references: [id])
}

model Affiliate {
  id          String              @id @default(cuid())
  userId      String              @unique
  code        String              @unique
  commission  Float
  earnings    Float               @default(0)
  clicks      Int                 @default(0)
  conversions Int                 @default(0)
  isActive    Boolean             @default(true)
  createdAt   DateTime            @default(now()) @db.Timestamp
  updatedAt   DateTime            @updatedAt @db.Timestamp
  user        User                @relation("UserAffiliates", fields: [userId], references: [id])
  referrals   AffiliateReferral[]
}

model AffiliateReferral {
  id          String    @id @default(cuid())
  affiliateId String
  orderId     String
  commission  Float
  status      String    @default("pending")
  createdAt   DateTime  @default(now()) @db.Timestamp
  updatedAt   DateTime  @updatedAt @db.Timestamp
  affiliate   Affiliate @relation(fields: [affiliateId], references: [id])
  order       Order     @relation("OrderAffiliateReferrals", fields: [orderId], references: [id])
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now()) @db.Timestamp
  updatedAt   DateTime @updatedAt @db.Timestamp
  createdById String
  createdBy   User     @relation("TeamCreator", fields: [createdById], references: [id])
  members     User[]   @relation("TeamMembers")
}

model Payout {
  id             String   @id @default(cuid())
  amount         Float
  status         String
  stripePayoutId String
  userId         String
  createdAt      DateTime @default(now()) @db.Timestamp
  updatedAt      DateTime @updatedAt @db.Timestamp
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
